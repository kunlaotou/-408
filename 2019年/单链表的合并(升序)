//
// Created by 唐文华 on 2022/9/15.
// 两个带头节点的单链表的合并（升序）
//
#include <stdio.h>
#include <stdlib.h>

//单链表结构体
typedef int ElemType;
typedef struct node{
    ElemType data;
    struct node* next;//next指向结点本身
}LNode, *LinkList;


//尾部插入法:带头结点(输入数据与输出数据相同)
void CreLinkListTail(LinkList L, int n){
    LNode* s, * r;//r结点
    ElemType x;
    int i;
    r = L;//r结点的初始化，首先指向链表L
    printf("带头结点尾插法--输入结点:\n");
    for (i = 0; i < n; i++){
        scanf("%d", &x);
        s = (LNode*)malloc(sizeof(LNode));
        s->next = NULL;//修改
        s->data = x;
        //上面三条语句和头部插入法相同
        r->next = s;//r的下一个结点是s
        r = s;//r指向s
    }
    //if (r != NULL)//r后没有结点 //修改
    //{
    //    r->next = NULL;
    //}
}

//合并两个单链表
LinkList mergeList(LinkList L1,LinkList L2) {
    LNode* head = (LNode*)malloc(sizeof(LNode));
    LNode* p1 = L1->next;			//扫描指针p1指向第一个链表
    LNode* p2 = L2->next;			//扫描指针p2指向第二个链表
    LNode* pre = head;		//记录前驱结点
    while (p1 != NULL && p2 != NULL) {
        if (p1->data <= p2->data) {            //按降序进行连接
            pre->next = p1;
            p1 = p1->next;
        }
        else {
            pre->next = p2;
            p2 = p2->next;
        }
        pre = pre->next;
    }
    pre->next = p1 == NULL ? p2 : p1;
    return head;
}



//输出链表信息
void OutPut(LinkList L) {
    LNode *p;
    p = L;    //p = L->next; 修改
    while (p != NULL) {
        printf("%d ", p->data);
        p = p->next;
    }
    printf("\n");
}


int main() {
    int n1;//n个结点
    printf("请在键盘中输入链表有几个结点:\n");
    scanf("%d", &n1);//输入n个结点
    LinkList LA = (LinkList)malloc(sizeof(LNode));//空链表的创建
    LA->next = NULL;//指针域为空
    CreLinkListTail(LA, n1);//尾插入法建立单链表L
    printf("尾插法--输出建立后的单链表:\n");
    OutPut(LA->next); //输出建立后的单链表

    int n2;
    printf("请在键盘中输入链表有几个结点:\n");
    scanf("%d", &n2);//输入n个结点
    LinkList LB = (LinkList)malloc(sizeof(LNode));//空链表的创建
    LB->next = NULL;//指针域为空
    CreLinkListTail(LB, n2);//尾插入法建立单链表L
    printf("尾插法--输出建立后的单链表:\n");
    OutPut(LB->next); //输出建立后的单链表

    LinkList LC = mergeList(LA, LB);
    printf("合并后的单链表:\n");
    OutPut(LC->next);
    return 0;
}

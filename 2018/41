
//
// Created by tangwenhua on 2022/10/13.
//

#include<stdio.h>
#include <stdbool.h>
#include <limits.h>
#include <malloc.h>


//快速排序
int Partition(int* arr, int low, int high){
    //一次划分
    int tmp = arr[low];//基准
    while (low < high){
        //（1）从后往前找比基准小的数字
        while (low<high && arr[high]>tmp){
            high--;
        }
        if (low < high){
            arr[low] = arr[high];
        }
        //（2）从前往后找比基准大的数字
        while (low < high && arr[low] <= tmp){
            low++;
        }
        if (low < high){
            arr[high] = arr[low];
        }
    }
    arr[low] = tmp;
    return low;
}
void Quick(int* arr, int low, int high){
    int par = Partition(arr,low, high);
    if (low < par - 1){//左边数据超过一个
        Quick(arr, low, par - 1);
    }
    if (par + 1 < high){//右边数据超过一个{
        Quick(arr, par + 1, high);
    }
}
void QuickSort(int* arr, int len){
    Quick(arr, 0, len - 1);//参数一致
}






int findMin_2(int nums[], int n){
    if(n == 0) return 1;
    QuickSort(nums, n);            //排序
    int compare = 0;
    for(int i = 0; i < n; i++){
        if(nums[i] <= 0) continue;            //非正整数直接掠过
        if(i > 0 && nums[i-1] == nums[i]) continue;   //重复的数字直接略过
        compare++;
        if(compare < nums[i]) return compare;
    }
    return compare+1;
}

bool IsExist(int a, int *b){
    for(int i = 0; i < sizeof(b); i++){
        if (a==b[i])
            return 1;
    }
    return 0;
}
int findMin_1(int nums[]){
    int i;
    for( i = 1; i < INT_MAX; i++){
        if(!IsExist(i, nums))
            return i;
    }
    return i+1;
}
int findMin_3(int nums[], int n){
    int *tmpArr =(int *)malloc(n * sizeof(int));
    for(int i = 0; i < n; i++){               //初始化临时数组为0
        tmpArr[i] = 0;
    }
    for(int i = 0; i < n; i++){          //若nums[i]的值介于1~n,则标记数组tmpArr
        if(nums[i] > 0 && nums[i] < n){
            tmpArr[nums[i] - 1] = nums[i];
        }
    }
    //找到第一个满足tmpArr[i] = 0的下标i
    int i;
    for(i = 0; i < n; i++){
        if(tmpArr[i] == 0)
            break;
    }
    return i+1;
}

void swap(int *x, int *y) {
    int tmp = *y;
    *y = *x;
    *x = tmp;
}
int findMin_4(int nums[], int n){
    for(int i = 0; i < n;){
        if(nums[i] >0 && nums[i] <=n && nums[nums[i] - 1]!= nums[i] && nums[i]!=i+1){
            swap(&nums[nums[i] - 1], &nums[i]);
        } else{
            i++;
        }
    }
    for(int i = 0; i < n; i++){
        if(nums[i] != i+1){
            return i+1;
        }
    }
    return n+1;
}



int main(){
     int a[6] = {-1, 2, 3, 7, -5, 2};
//     int a[6] = {2, -3, 3, 1, 5, 7};
//    int a[4] = {1, 2, 3, 4};
    int min = findMin_4(a, 6);
    printf("缺失的最小正整数为：%d\n", min);

    return 0;
}
